
<?PHP 
code::init();
code::initFunction("Remover(Palavra)");
code::l("leitor : NoTrie;","Declarando variável para fazer a varredura da árvore em busca da palavra");
code::l("caminho : EstruturaPilha &lt; NoTrie &gt; ;","Declarando variável para armazenar o percurso realizado para encontrar a palavra");
code::l("ind, max : inteiro;","Declarando variáveis para auxiliar a varredura");
code::l("leitor := RAIZ;","Varredura iniciando na raiz da Árvore");
code::l("ind := 0;","Inicializando contador");
code::l("max := Palavra.length - 1;","Definindo variável auxiliar");
code::l();
code::l("Enquanto leitor != nulo faça","Percorrendo estrutura em busca do último nó da palavra");
code::begin();
    code::l("Se leitor.info < Palavra[ind] então","Se a letra possuir código menor que a letra a pesquisada");
    code::begin();
        code::l("leitor := leitor.direita;","Varredura continua ao nó da direita");
    code::end();
    code::l("Senão se leitor.info == Palavra[ind] então","Se a letra possuir código igual a letra pesquisada");
    code::begin();
        code::l("Se ind == max então");
        code::begin();
            code::l("Break;","Encerra a varredura");
        code::end();
        code::l("Empilha(caminho,leitor);","Adiciona ao caminho o nó atual");
        code::l("leitor := leitor.abaixo;","Varredura continua ao nó da abaixo");
        code::l("ind := ind + 1;","Varredura continua para a próxima letra da Palavra a ser removida");
    code::end();
code::end();
code::l();
code::l("Se leitor != nulo e leitor.fim então","Se a palavra foi encontrada");
code::begin();
    code::l("Se leitor.abaixo != nulo então","Se o último nó da varredura possui um nó-filho");
    code::begin();
        code::l("leitor.fim := Falso;","Apenas altera-se a flag de última letra de uma palavra");
    code::end();
    code::l("Senão","Se o último nó da varredura não possui um nó-filho");
    code::begin();
        code::l("ind := ind - 2;","Decrementando variável para selecionar o nó-pai do último nó da palavra");
        code::l("pai : NoTrie;","Declarando variável auxiliar");
        code::l("pai := caminho[ind];","Recuperando o nó-pai do último nó da palavra");
        code::l("Enquanto pai != nulo e pai.fim == Falso e pai.abaixo.direita == nulo faça","Percorrendo inversamente a ramificação a ser removida da árvore");
        code::begin();
            code::l("Liberar(pai.abaixo);","Liberando a memória do nó-filho");
            code::l("pai.abaixo := nulo;","Desalocando ponteiro");
            code::l("ind := ind - 1;","Decrementando contador");
            code::l("pai = caminho[ind];","Varredura avança para o próximo nó-pai");
        code::end();
        code::l();
        code::l("Se pai != nulo e pai.abaixo.direita == nulo então");
        code::begin();
            code::l("Liberar(pai.abaixo);");
            code::l("pai.abaixo := nulo;");
        code::end();
        code::l("Senão se pai != nulo então","Se a ramificação removida não for a única da árvore");
        code::begin();
            code::l("anterior : NoTrie;","Declarando variável auxiliar para percorrer a lista que gera a ramificação");
            code::l("anterior := nulo;","Definindo variável auxiliar como nulo");
            code::l("leitor := pai.abaixo;","Incializando varredura do leitor");
            code::l();
            code::l("Enquanto leitor != caminho[ind+1] faça","Percorrendo a lista que gera a ramificação até o ínicio dela");
            code::begin();
                code::l("anterior := leitor;","Variável auxiliar recebe o nó atual");
                code::l("leitor := leitor.direita;","Varredura avança para o próximo elemento da lista");
            code::end();
            code::l();
            code::l("Se anterior != nulo então","Se a ramificação não for a primeira da lista");
            code::begin();
                code::l("anterior.direita := leitor.direita;","nó anterior aponta para o próximo");
            code::end();
            code::l("Senão","Se a ramificação for a primeira da lista");
            code::begin();
                code::l("pai.abaixo := leitor.direita;","nó-pai apontará para o próximo nó na lista a direita");
            code::end();
            code::l("Liberar(leitor);","Liberando a memória do nó do início da ramificação");
        code::end();
        code::l("Senão","Se a ramificação removida for a única da árvore");
        code::begin();
            code::l("RAIZ := nulo;","Liberando ponteiro da raiz da árvore");
        code::end();
    code::end();

code::end();
code::write();
